package com.gitstart.services;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
public class GithubController {

    @GetMapping("/api/github-repo")
    public GitHubRepository searchGithubRepo(@RequestParam String username) {
        String githubApiUrl = "https://api.github.com/users/" + username + "/repos";
        RestTemplate restTemplate = new RestTemplate();

        try {
            GitHubRepository[] response = restTemplate.getForObject(githubApiUrl, GitHubRepository[].class);

            if (response != null && response.length > 0) {
                GitHubRepository firstRepo = response[0];
                String repoName = firstRepo.getName();

                // Realiza una segunda solicitud para obtener detalles del primer repositorio
                String repoDetailsUrl = "https://api.github.com/repos/" + username + "/" + repoName;
                GitHubRepository detailedRepo = restTemplate.getForObject(repoDetailsUrl, GitHubRepository.class);

                // Verifica si se pudo obtener la fecha de creación del repositorio
                if (detailedRepo != null && detailedRepo.getCreatedAt() != null) {
                    return detailedRepo;
                } else {
                    // Si no se pudo obtener la fecha, devuelve el primer repositorio sin fecha
                    firstRepo.setCreatedAt(null); // Establece la fecha como nula
                    return firstRepo;
                }
            } else {
                // Si el usuario no tiene repositorios, devuelve un objeto GitHubRepository vacío
                return new GitHubRepository();
            }
        } catch (HttpClientErrorException e) {
            // Maneja el error si el usuario no existe o hay otro problema con la solicitud
            e.printStackTrace();
            return new GitHubRepository();
        }
    }
}
